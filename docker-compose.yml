services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: accessibility-api
    env_file: .env
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      # Add this to prevent immediate exit
      - NODE_OPTIONS=--unhandled-rejections=strict
    command: ["sh", "-c", "tail -f /dev/null"]  # This will keep container running
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./assets:/usr/src/app/assets
      - ./logs:/usr/src/app/logs
    networks:
      - accessibility-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  postgres:
    image: postgres:14-alpine
    container_name: accessibility-postgres
    environment:
      POSTGRES_PASSWORD: Test@1234
      POSTGRES_USER: web-way
      POSTGRES_DB: web-way
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - accessibility-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U web-way"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: accessibility-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - accessibility-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  accessibility-network:
    driver: bridge