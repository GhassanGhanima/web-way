name: Production Deployment

on:
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build Application
        run: npm run build
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract version
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/accessibility-tool:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/accessibility-tool:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/accessibility-tool:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/accessibility-tool:buildcache,mode=max
          
      # Deploy to your production infrastructure
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /path/to/production
            docker-compose pull
            docker-compose up -d
            docker system prune -af
            
      # Run database migrations
      - name: Run migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /path/to/production
            docker-compose exec -T app npm run migration:run
            
      # Post-deployment verification
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          curl -sSf ${{ secrets.PRODUCTION_URL }}/api/v1/health || exit 1
          echo "Deployment verified successfully!"
      
      # Notify team of successful deployment
      - name: Notify deployment
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Production Deployment Completed
          SLACK_MESSAGE: 'Version ${{ env.VERSION }} has been successfully deployed to production!'
